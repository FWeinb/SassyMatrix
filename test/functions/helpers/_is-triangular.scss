@include describe("The is-triangular function") {
  $matrix-top: (
    (1 0 0)
    (2 1 0)
    (0 0 1)
  );

  $matrix-bottom: (
    (1 0 2)
    (0 1 0)
    (0 0 1)
  );

  @include it("should return whether only the specified side of the grid is empty") {
    @include should(expect(_is-triangular(matrix(3), top)), to(equal(true)));
    @include should(expect(_is-triangular(matrix(3), bottom)), to(equal(true)));
    @include should(expect(_is-triangular(unit-matrix(3), top)), to(equal(true)));
    @include should(expect(_is-triangular(unit-matrix(3), bottom)), to(equal(true)));
    @include should(expect(_is-triangular($matrix-top, top)), to(equal(true)));
    @include should(expect(_is-triangular($matrix-top, bottom)), to(equal(false)));
    @include should(expect(_is-triangular($matrix-bottom, top)), to(equal(false)));
    @include should(expect(_is-triangular($matrix-bottom, bottom)), to(equal(true)));
  }

  @include it("with unit flag should return if the matrix is triangular and the diagonal is 1") {
    @include should(expect(_is-triangular(unit-matrix(3), top, unit)), to(equal(true)));
    @include should(expect(_is-triangular(unit-matrix(3), bottom, unit)), to(equal(true)));
    @include should(expect(_is-triangular(matrix(3), top, unit)), to(equal(false)));
    @include should(expect(_is-triangular(matrix(3), bottom, unit)), to(equal(false)));
    @include should(expect(_is-triangular($matrix-top, top, unit)), to(equal(true)));
    @include should(expect(_is-triangular($matrix-top, bottom, unit)), to(equal(false)));
    @include should(expect(_is-triangular($matrix-bottom, top, unit)), to(equal(false)));
    @include should(expect(_is-triangular($matrix-bottom, bottom, unit)), to(equal(true)));
  }

  @include it("with strict flag should return if the matrix is triangular and the diagonal is 0") {
    @include should(expect(_is-triangular(unit-matrix(3), top, strict)), to(equal(false)));
    @include should(expect(_is-triangular(unit-matrix(3), bottom, strict)), to(equal(false)));
    @include should(expect(_is-triangular(matrix(3), top, strict)), to(equal(true)));
    @include should(expect(_is-triangular(matrix(3), bottom, strict)), to(equal(true)));
    @include should(expect(_is-triangular($matrix-top, top, strict)), to(equal(false)));
    @include should(expect(_is-triangular($matrix-top, bottom, strict)), to(equal(false)));
    @include should(expect(_is-triangular($matrix-bottom, top, strict)), to(equal(false)));
    @include should(expect(_is-triangular($matrix-bottom, bottom, strict)), to(equal(false)));
  }
}